#!/bin/csh

if (-d temp) then
   rm -r temp
endif
mkdir temp
mkdir temp/js
mkdir temp/dist
mkdir temp/dist/js
mkdir temp/dist/style
mkdir temp/dist/style/images
mkdir temp/dist/applogos
mkdir temp/dist/images

echo Obfuscating.  Wait, it will take about ten seconds....

#--- list here all the names to be mangled
set to_mangle = ( \
   z_language z_months z_date z_btnInstall z_betterInstall z_installFailure \
   z_safariInstall z_OK z_cancel z_info z_warning z_error z_confirm z_preferences \
   z_edit z_testMode z_noFileApi z_noFileApiProp z_noFileSelected z_pickImageError \
   z_whoAmI z_banner z_newLogin z_badLogin z_loginAs z_newAlbum z_authDenied \
   z_revokeAccess z_enterTweet z_photosUploaded z_albumCreated z_chooseNetwork \
   z_noNetwork z_initLogin z_picasaLogin z_login z_passwd z_selectOrCreateAlbum \
   z_createAlbumProlog1 z_createAlbumProlog2 z_title z_description z_albumDescr \
   z_photoAlbum z_albumTitle z_email z_phone z_gender z_birthday z_grantedPay \
   z_deniedPay z_pendingPay z_cancelPay z_install_changed z_installed \
   z_uninstalled z_failed z_unsupported z_install_forIOS \
)

#--- the externals for google closure compiler
cat >temp/externs.js <<END_EXTERNALS
Navigator.prototype.mozApps;

function Apps() {}
Apps.prototype.getSelf = function() {};
Apps.prototype.install = function(url, opt_args) {};
Apps.prototype.getInstalled = function() {};

HTMLCanvasElement.prototype.toBlob = function(callback, opt_type, opt_args) {};
Event.prototype.isTrusted;
END_EXTERNALS

# build a sed script to mangle most of our strings
set vals = (a b c d e f g h i j k l m n o p q r s t u v w x y z)
set ix = 1;
set jx = 0;
set p = "";
echo "# sed script" > temp/sedscript
foreach name ($to_mangle)
   if ($ix > ${#vals}) then
      @ jx++
      set p = $vals[$jx]
      set ix = 1
   endif
   echo s\`\(\'\|\"\)$name\(\'\|\"\)\`\\1${p}${vals[$ix]}\\2\` >> temp/sedscript
   @ ix++
end

# modify index.html to point at the new css and js
sed -e '/-- REPLACED --/, /-- REPLACEMENT/d' -e '/REPLACE END --/d' ../war/index.html >temp/index.html

# mangle our strings in index.html
sed -r -f temp/sedscript temp/index.html > temp/dist/index.html

# mangle our strings in all js files
foreach file(../war/js/*.js)
   sed -r -f temp/sedscript $file > temp/js/`basename $file`
end

# compress the style sheets
foreach file(../war/style/*.css)
   java -classpath ../.. -jar yui.jar $file >> temp/dist/style/jaxogram.min.css
end

# cook the proper java command to obfuscate all js files (closure compiler)
set jarcmd = "java -jar compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS --externs temp/externs.js --js_output_file=temp/dist/js/jaxogram.min.js"
foreach file(temp/js/*.js)
   set jarcmd = "${jarcmd} --js=${file}"
end

# do the obfuscation
$jarcmd >& temp/warn

# copy other required files to dist
cp -p ../war/manifest.webapp temp/dist
cp -p ../war/favicon.ico temp/dist
cp -p ../war/images/* temp/dist/images
cp -p ../war/style/images/* temp/dist/style/images
cp -p ../war/applogos/* temp/dist/applogos

# zip it
if (-e jaxogram.zip) then
   rm jaxogram.zip
endif
cd temp/dist
zip -r ../../jaxogram.zip * >& ../zipped
echo All done.  Result in jaxogram.zip

# zip jaxogram -x */.DS_Store -r
# manifest.webapp
# index.html
# favicon.ico
# js
# style
# applogos
# images
