#!/bin/csh

if (-d temp/) then
   rm -r temp
endif
if (-d war/js) then
   rm -r war/js
endif
if (-d war/style) then
   rm -r war/style
endif
if (-d war/style/images) then
   rm -r war/style/images
endif
if (-d war/applogos) then
   rm -r war/applogos
endif
if (-d war/images) then
   rm -r war/images
endif

mkdir temp
mkdir temp/js
mkdir war/js
mkdir war/style
mkdir war/style/images
mkdir war/applogos
mkdir war/images

echo Obfuscating.  Wait, it will take about ten seconds....

#--- list here all the names to be mangled
set to_mangle = ( \
   z_language z_months z_date z_btnInstall z_betterInstall z_installFailure \
   z_safariInstall z_OK z_cancel z_info z_warning z_error z_confirm z_preferences \
   z_edit z_testMode z_noFileApi z_noFileApiProp z_noFileSelected z_pickImageError \
   z_whoAmI z_banner z_newLogin z_badLogin z_loginAs z_newAlbum z_authDenied \
   z_revokeAccess z_enterTweet z_photosUploaded z_albumCreated z_chooseNetwork \
   z_noNetwork z_initLogin z_picasaLogin z_login z_passwd z_selectOrCreateAlbum \
   z_createAlbumProlog1 z_createAlbumProlog2 z_title z_description z_albumDescr \
   z_photoAlbum z_albumTitle z_email z_phone z_gender z_birthday z_grantedPay \
   z_deniedPay z_pendingPay z_cancelPay z_install_changed z_installed \
   z_uninstalled z_failed z_unsupported z_install_forIOS \
)

#--- the externals for google closure compiler
cat >temp/externs.js <<END_EXTERNALS
Navigator.prototype.mozApps;
Navigator.prototype.mozPay = function(jwts) {};

function Apps() {}
Apps.prototype.getSelf = function() {};
Apps.prototype.install = function(url, opt_args) {};
Apps.prototype.getInstalled = function() {};

function App() {}
App.prototype.manifest;
App.prototype.manifestURL;
App.prototype.origin;
App.prototype.installOrigin;
App.prototype.installTime;
App.prototype.receipts;
App.prototype.launch = function() {};
App.prototype.checkForUpdate = function() {};

function chrome() {}
chrome.prototype.webstore;
chrome.prototype.webstore.install = function(url, ok_callback, fail_callback) {};
chrome.prototype.app;
chrome.prototype.app.isInstalled;

HTMLCanvasElement.prototype.toBlob = function(callback, opt_type, opt_args) {};
Event.prototype.isTrusted;
END_EXTERNALS

# build a sed script to mangle most of our strings
set vals = (a b c d e f g h i j k l m n o p q r s t u v w x y z)
set ix = 1;
set jx = 0;
set p = "";
echo "# sed script" > temp/sedscript
foreach name ($to_mangle)
   if ($ix > ${#vals}) then
      @ jx++
      set p = $vals[$jx]
      set ix = 1
   endif
   echo s\`\(\'\|\"\)$name\(\'\|\"\)\`\\1${p}${vals[$ix]}\\2\` >> temp/sedscript
   @ ix++
end

# modify index.html to point at the new css and js
sed -e '/-- REPLACED --/, /-- REPLACEMENT/d' -e '/REPLACE END --/d' pretty/index.html >temp/index.html

# mangle our strings in index.html
sed -r -f temp/sedscript temp/index.html > war/index.html

# mangle our strings in all js files
foreach file(pretty/js/*.js)
   sed -r -f temp/sedscript $file > temp/js/`basename $file`
end

# compress the style sheets
foreach file(pretty/style/*.css)
   java -classpath ../.. -jar buildlib/yui.jar $file >> war/style/jaxogram.min.css
end

# cook the proper java command to obfuscate all js files (closure compiler)
set jarcmd = "java -jar buildlib/compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS --externs temp/externs.js --js_output_file=war/js/jaxogram.min.js"
foreach file(temp/js/*.js)
   set jarcmd = "${jarcmd} --js=${file}"
end

# do the obfuscation
$jarcmd >& temp/warn

# copy other required files to dist
cp -p pretty/manifest.webapp war
cp -p pretty/hosted_manifest.webapp war
cp -p pretty/favicon.ico war
cp -p pretty/images/* war/images
cp -p pretty/style/images/* war/style/images
cp -p pretty/applogos/* war/applogos

# zip it
if (-e jaxogram.zip) then
   rm jaxogram.zip
endif
cd war
# zip -r ../jaxogram.zip * >& ../temp/zipped
zip ../jaxogram.zip \
   -r manifest.webapp index.html favicon.ico js style applogos images \
   >& ../temp/zipped
echo All done.  Result in jaxogram.zip

